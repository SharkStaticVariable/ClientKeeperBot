package io.project.clientkeeperbot.service;

import io.project.clientkeeperbot.config.BotConfig;
import io.project.clientkeeperbot.entity.BotStateContext;
import io.project.clientkeeperbot.entity.Request;
import io.project.clientkeeperbot.state.BotState;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

@Service
@RequiredArgsConstructor
public class TelegramBot extends TelegramLongPollingBot {
    private final UserService userService;
    private final CaptchaService captchaService;
    private final BotConfig botConfig;
    private final AdminAuthService adminAuthService;
    private final AdminService adminService;
    private final BotStateContextService botStateContextService;
    private final RequestService requestService;
    private final CommandAccessFilter commandAccessFilter;

    private final ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor();

    private void sendTextMessage(Long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        execute(message);
    }

    @Override
    public String getBotUsername() {
        return botConfig.getBotUsername();
    }

    @Override
    public String getBotToken() {
        return botConfig.getBotToken();
    }

    @Override
    public void onRegister() {
        super.onRegister();
    }

    @Override
    public void onUpdateReceived(Update update) {
        System.out.println("Received update: " + update); // –î–æ–±–∞–≤—å—Ç–µ –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        executorService.submit(() -> processUpdate(update));
    }

    private void processUpdate(Update update) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º
        if (update.hasMessage() && update.getMessage().hasText()) {
            Long chatId = update.getMessage().getChatId();
            String text = update.getMessage().getText();

            try {
                BotStateContext botStateContext = botStateContextService.getBotStateContext(chatId);

                if (text.equals("/start")) {
                    handleStartCommand(chatId, update);
                    return;
                }

                if (botStateContext == null) {
                    botStateContextService.setBotState(chatId, BotState.START);
                    return;
                }

                BotState currentState = botStateContext.getCurrentState();

                if (currentState == BotState.WAITING_CAPTCHA) {
                    handleCaptchaInput(chatId, text, update.getMessage().getFrom(), botStateContext);
                    return;
                }

                if (adminAuthService.isAdmin(chatId)) {
                    handleAdminCommands(chatId, text);
                    return;
                }

                handleUserCommands(chatId, text, currentState);
            } catch (Exception e) {
                handleError(chatId, e);
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        if (update.hasCallbackQuery()) {
            CallbackQuery callbackQuery = update.getCallbackQuery();

            try {
                // –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç CallbackQuery –≤ handleCallbackQuery
                handleCallbackQuery(callbackQuery);
            } catch (Exception e) {
                Long chatId = callbackQuery.getMessage().getChatId(); // –ø–æ–ª—É—á–∞–µ–º chatId –∏–∑ callbackQuery –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                handleError(chatId, e);
            }
        }
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) throws TelegramApiException {
        Long chatId = callbackQuery.getMessage().getChatId();
        String callbackData = callbackQuery.getData();

        switch (callbackData) {
            case "faq":
                sendTextMessage(chatId, "FAQ: –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º?");
                break;
            case "leave_feedback":
                sendTextMessage(chatId, "–≤–∞—à–∏ –∑–∞—è–≤–∫–∏.");
                sendUserRequests(chatId);
                break;
            case "create_request":
                requestService.startDraft(chatId);
                botStateContextService.setBotState(chatId, BotState.ASK_PROJECT_TYPE);
                sendTextMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:");

                break;
            default:
                sendTextMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
                break;
        }
        // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç callbackData, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        switch (callbackData) {
            case "edit_type":
                botStateContextService.setBotState(chatId, BotState.EDIT_PROJECT_TYPE);
                sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:");
                break;
            case "edit_description":
                botStateContextService.setBotState(chatId, BotState.EDIT_DESCRIPTION);
                sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:");
                break;
            case "edit_deadline":
                botStateContextService.setBotState(chatId, BotState.EDIT_DEADLINE);
                sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Ä–æ–∫–∏:");
                break;
            case "edit_budget":
                botStateContextService.setBotState(chatId, BotState.EDIT_BUDGET);
                sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç:");
                break;
            case "edit_contact":
                botStateContextService.setBotState(chatId, BotState.EDIT_CONTACT);
                sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:");
                break;
            case "submit_request":
                requestService.saveFinalRequest(chatId);
                botStateContextService.setBotState(chatId, BotState.MAIN_MENU);
                sendTextMessage(chatId, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.");
                sendMainMenu(chatId);
                break;
            default:
                sendTextMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
        }
    }
    private void handleStartCommand(Long chatId, Update update) throws TelegramApiException {
    User telegramUser = update.getMessage().getFrom();

    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    String firstName = telegramUser.getFirstName();
    String lastName = telegramUser.getLastName();

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    String welcomeMessage = String.format(
            "–ü—Ä–∏–≤–µ—Ç, %s %s! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
            firstName, (lastName != null ? lastName : "")
    ).trim(); // .trim() —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª, –µ—Å–ª–∏ —Ñ–∞–º–∏–ª–∏—è –ø—É—Å—Ç–∞—è

    sendTextMessage(chatId, welcomeMessage);
    sendCaptcha(chatId);

    BotStateContext botStateContext = botStateContextService.getBotStateContext(chatId);
    if (botStateContext == null) {
        System.out.println("State is null, setting to WAITING_CAPTCHA");
        botStateContextService.setBotState(chatId, BotState.WAITING_CAPTCHA);
    }
    captchaService.storeUserData(chatId, telegramUser);
}


    private void handleCaptchaInput(Long chatId, String inputText, User telegramUser, BotStateContext botStateContext) throws TelegramApiException {
        if (captchaService.verifyCaptcha(chatId, inputText)) {
            userService.registerUser(telegramUser);
            sendSuccessMessage(chatId);
            sendMainMenu(chatId);
            botStateContextService.setBotState(chatId, BotState.MAIN_MENU);
        } else {
            sendTextMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫–∞–ø—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            sendCaptcha(chatId);
        }
    }

    private void handleAdminCommands(Long chatId, String text) throws TelegramApiException {
        if (text.equals("/admin")) {
            adminService.showAdminPanel(chatId, this);
        } else if (text.equals("/start")) {
            sendTextMessage(chatId, "‚ö†Ô∏è –í—ã —É–∂–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin");
        }
    }
    private void sendUserRequests(Long chatId) {
        List<Request> userRequests = requestService.getRequestsByClientId(chatId);

        if (userRequests.isEmpty()) {
            try {
                sendTextMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.");
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
            return;
        }

        for (Request req : userRequests) {
            String message = String.format(
                    "üÜî ‚Ññ%d\n" +
                            "üìå –¢–∏–ø: %s\n" +
                            "üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s\n" +
                            "üìÖ –°—Ä–æ–∫–∏: %s\n" +
                            "üí∞ –ë—é–¥–∂–µ—Ç: %s\n" +
                            "üì± –ö–æ–Ω—Ç–∞–∫—Ç: %s\n" +
                            "üìä –°—Ç–∞—Ç—É—Å: %s",
                    req.getId(),
                    req.getType(),
                    req.getDescription(),
                    req.getDeadline(),
                    req.getBudget(),
                    req.getContact(),
                    req.getStatus()
            );

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();

            InlineKeyboardButton editButton = new InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
            editButton.setCallbackData("edit_request:" + req.getId());

            rows.add(List.of(editButton));
            markup.setKeyboard(rows);

            try {
                sendTextMessageWithInlineKeyboard(chatId, message, markup);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }
    }
    private void sendTextMessageWithInlineKeyboard(Long chatId, String text, InlineKeyboardMarkup keyboard) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setReplyMarkup(keyboard);
        execute(message);
    }



    private void handleUserCommands(Long chatId, String text, BotState currentState) throws TelegramApiException {
        if (!commandAccessFilter.isAllowed(currentState, text)) {
            sendTextMessage(chatId, "–í—ã —Å–µ–π—á–∞—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏.");
            return;
        }
        switch (currentState) {

            case MAIN_MENU -> {
                switch (text) {
                    case "FAQ" -> sendTextMessage(chatId, "FAQ: –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º?");
                    case "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É" -> {
                        requestService.startDraft(chatId);
                        botStateContextService.setBotState(chatId, BotState.ASK_PROJECT_TYPE);
                        sendTextMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:");
                        sendProjectTypeOptions(chatId);
                    }
                    case "–ú–æ–∏ –∑–∞—è–≤–∫–∏" -> {
                        sendUserRequests(chatId); // <--- –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
                    }

                    case "–ù–∞–∑–∞–¥" -> sendTextMessage(chatId, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.");
                }
            }

            case ASK_PROJECT_TYPE -> {
                requestService.setType(chatId, text);
                botStateContextService.setBotState(chatId, BotState.ASK_DESCRIPTION);
                sendTextMessage(chatId, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç:");
            }

            case ASK_DESCRIPTION -> {
                requestService.setDescription(chatId, text);
                botStateContextService.setBotState(chatId, BotState.ASK_DEADLINE);
                sendTextMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:");
            }

            case ASK_DEADLINE -> {
                requestService.setDeadline(chatId, text);
                botStateContextService.setBotState(chatId, BotState.ASK_BUDGET);
                sendTextMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç:");
            }

            case ASK_BUDGET -> {
                requestService.setBudget(chatId, text);
                botStateContextService.setBotState(chatId, BotState.ASK_CONTACT);
                sendTextMessage(chatId, "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:");
            }

            case ASK_CONTACT -> {
                requestService.setContact(chatId, text);
                botStateContextService.setBotState(chatId, BotState.REVIEW_DRAFT);
                sendDraftSummaryWithActions(chatId); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏
            }

            case REVIEW_DRAFT -> {
                switch (text) {
                    case "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞" -> {
                        botStateContextService.setBotState(chatId, BotState.EDIT_PROJECT_TYPE);
                        sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:");
                    }
                    case "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ" -> {
                        botStateContextService.setBotState(chatId, BotState.EDIT_DESCRIPTION);
                        sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:");
                    }
                    case "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫–∏" -> {
                        botStateContextService.setBotState(chatId, BotState.EDIT_DEADLINE);
                        sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Ä–æ–∫–∏:");
                    }
                    case "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç" -> {
                        botStateContextService.setBotState(chatId, BotState.EDIT_BUDGET);
                        sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç:");
                    }
                    case "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç" -> {
                        botStateContextService.setBotState(chatId, BotState.EDIT_CONTACT);
                        sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:");
                    }
                    case "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É" -> {
                        requestService.saveFinalRequest(chatId);
                        botStateContextService.setBotState(chatId, BotState.MAIN_MENU);
                        sendTextMessage(chatId, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.");
                        sendMainMenu(chatId);
                    }
                    default -> sendTextMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.");
                }
            }

            case EDIT_PROJECT_TYPE -> {
                requestService.setType(chatId, text);
                botStateContextService.setBotState(chatId, BotState.REVIEW_DRAFT);
                sendDraftSummaryWithActions(chatId);
            }

            case EDIT_DESCRIPTION -> {
                requestService.setDescription(chatId, text);
                botStateContextService.setBotState(chatId, BotState.REVIEW_DRAFT);
                sendDraftSummaryWithActions(chatId);
            }

            case EDIT_DEADLINE -> {
                requestService.setDeadline(chatId, text);
                botStateContextService.setBotState(chatId, BotState.REVIEW_DRAFT);
                sendDraftSummaryWithActions(chatId);
            }

            case EDIT_BUDGET -> {
                requestService.setBudget(chatId, text);
                botStateContextService.setBotState(chatId, BotState.REVIEW_DRAFT);
                sendDraftSummaryWithActions(chatId);
            }

            case EDIT_CONTACT -> {
                requestService.setContact(chatId, text);
                botStateContextService.setBotState(chatId, BotState.REVIEW_DRAFT);
                sendDraftSummaryWithActions(chatId);
            }
        }
    }
    private void sendReviewButtons(Long chatId) throws TelegramApiException {
        SendMessage msg = new SendMessage();
        msg.setChatId(chatId.toString());
        msg.setText("–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë:");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup(List.of(
                new KeyboardRow(List.of(new KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"))),
                new KeyboardRow(List.of(new KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")))
        ));
        keyboard.setResizeKeyboard(true);
        msg.setReplyMarkup(keyboard);
        execute(msg);
    }

    private void sendEditFieldButtons(Long chatId) throws TelegramApiException {
        SendMessage msg = new SendMessage();
        msg.setChatId(chatId.toString());
        msg.setText("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup(List.of(
                new KeyboardRow(List.of(new KeyboardButton("–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞"))),
                new KeyboardRow(List.of(new KeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ"))),
                new KeyboardRow(List.of(new KeyboardButton("–°—Ä–æ–∫–∏"))),
                new KeyboardRow(List.of(new KeyboardButton("–ë—é–¥–∂–µ—Ç"))),
                new KeyboardRow(List.of(new KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç")))
        ));
        keyboard.setResizeKeyboard(true);
        msg.setReplyMarkup(keyboard);
        execute(msg);
    }

    private void sendDraftSummaryWithActions(Long chatId) throws TelegramApiException {
        String summary = requestService.getDraftSummary(chatId);

        InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        rows.add(List.of(button("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞", "edit_type"), button("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "edit_description")));
        rows.add(List.of(button("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫–∏", "edit_deadline"), button("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç", "edit_budget")));
        rows.add(List.of(button("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", "edit_contact")));
        rows.add(List.of(button("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "submit_request")));

        inlineKeyboard.setKeyboard(rows);

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(summary + "\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.");
        message.setReplyMarkup(inlineKeyboard);

        execute(message);
    }

    private void sendProjectTypeOptions(Long chatId) throws TelegramApiException {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        rows.add(List.of(createButton("üåê –°–∞–π—Ç", "type:–°–∞–π—Ç")));
        rows.add(List.of(createButton("üì± –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "type:–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")));
        rows.add(List.of(createButton("ü§ñ –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç", "type:–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç")));
        rows.add(List.of(createButton("‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "type:–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è")));
        rows.add(List.of(createButton("üé® –î–∏–∑–∞–π–Ω", "type:–î–∏–∑–∞–π–Ω")));
        rows.add(List.of(createButton("üß† –î—Ä—É–≥–æ–µ", "type:–î—Ä—É–≥–æ–µ")));

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);
        sendTextMessageWithInlineKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:", markup);
    }

    private InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }


    private InlineKeyboardButton button(String text, String callbackData) {
        return InlineKeyboardButton.builder()
                .text(text)
                .callbackData(callbackData)
                .build();
    }




    private void sendSuccessMessage(Long chatId) throws TelegramApiException {
        sendTextMessage(chatId, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.");
    }

    private void sendMainMenu(Long chatId) throws TelegramApiException {
        SendMessage menu = new SendMessage();
        menu.setChatId(chatId.toString());
        menu.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");

        // –°–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫–∏
        InlineKeyboardButton button1 = new InlineKeyboardButton();
        button1.setText("FAQ");
        button1.setCallbackData("faq");

        InlineKeyboardButton button2 = new InlineKeyboardButton();
        button2.setText("–ú–æ–∏ –∑–∞—è–≤–∫–∏");
        button2.setCallbackData("leave_feedback");

        InlineKeyboardButton button3 = new InlineKeyboardButton();
        button3.setText("–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É");
        button3.setCallbackData("create_request");

        // –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(button1);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(button2);

        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(button3);

        // –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        keyboard.setKeyboard(List.of(row1, row2, row3));

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        menu.setReplyMarkup(keyboard);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        execute(menu);
    }



    private void sendCaptcha(Long chatId) throws TelegramApiException {
        try {
            String imageBase64 = captchaService.generateCaptchaImageBase64(chatId);
            SendPhoto photo = new SendPhoto(
                    chatId.toString(),
                    new InputFile(
                            new ByteArrayInputStream(Base64.getDecoder().decode(imageBase64)),
                            "captcha.png"
                    )
            );
            photo.setCaption("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:");
            execute(photo);
        } catch (IOException e) {
            throw new TelegramApiException("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–ø—á–∏", e);
        }
    }

    private void handleError(Long chatId, Exception e) {
        try {
            sendTextMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        } catch (TelegramApiException ex) {
            ex.printStackTrace();
        }
        e.printStackTrace();
    }
}
