package io.project.clientkeeperbot.service;

import io.project.clientkeeperbot.entity.Users;
import io.project.clientkeeperbot.infrastructure.config.BotConfig;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Base64;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

@Service
@RequiredArgsConstructor
public class TelegramBot extends TelegramLongPollingBot {
    private final UserService userService;
    private final CaptchaService captchaService;
    private final BotConfig botConfig;
    private final ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor();

    @Override
    public String getBotUsername() {
        return botConfig.getBotUsername();
    }

    @Override
    public String getBotToken() {
        return botConfig.getBotToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        executorService.submit(() -> processUpdate(update));
    }

    private void processUpdate(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) {
            return;
        }

        Long chatId = update.getMessage().getChatId();
        String text = update.getMessage().getText();

        try {
            if (text.equals("/start")) {
                handleStartCommand(chatId, update);
            } else if (captchaService.isCaptchaPending(chatId)) {
                handleCaptchaInput(chatId, text, update.getMessage().getFrom());
            }
        } catch (Exception e) {
            handleError(chatId, e);
        }
    }

    private void handleStartCommand(Long chatId, Update update) throws TelegramApiException {
        User telegramUser = update.getMessage().getFrom();

        String welcomeMessage = String.format(
                "–ü—Ä–∏–≤–µ—Ç, %s! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
                telegramUser.getFirstName()
        );

        sendMessage(chatId, welcomeMessage);
        sendCaptcha(chatId);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        captchaService.storeUserData(chatId, telegramUser);
    }

    private void handleCaptchaInput(Long chatId, String inputText, User telegramUser) throws TelegramApiException {
        if (captchaService.verifyCaptcha(chatId, inputText)) {
            // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userService.registerUser(telegramUser);
            sendSuccessMessage(chatId);
            sendMainMenu(chatId);
        } else {
            sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫–∞–ø—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            sendCaptcha(chatId);
        }
    }

    private void sendSuccessMessage(Long chatId) throws TelegramApiException {
        sendMessage(chatId, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.");
    }

    private void sendMainMenu(Long chatId) throws TelegramApiException {
        SendMessage menu = new SendMessage();
        menu.setChatId(chatId.toString());
        menu.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup(List.of(
                new KeyboardRow(List.of(new KeyboardButton("FAQ"))),
                new KeyboardRow(List.of(new KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))),
                new KeyboardRow(List.of(new KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")))
        ));

        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);
        menu.setReplyMarkup(keyboard);

        execute(menu);
    }

    private void sendCaptcha(Long chatId) throws TelegramApiException {
        try {
            String imageBase64 = captchaService.generateCaptchaImageBase64(chatId);
            SendPhoto photo = new SendPhoto(
                    chatId.toString(),
                    new InputFile(
                            new ByteArrayInputStream(Base64.getDecoder().decode(imageBase64)),
                            "captcha.png"
                    )
            );
            photo.setCaption("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:");
            execute(photo);
        } catch (IOException e) {
            throw new TelegramApiException("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–ø—á–∏", e);
        }
    }

    private void sendMessage(Long chatId, String text) throws TelegramApiException {
        execute(new SendMessage(chatId.toString(), text));
    }

    private void handleError(Long chatId, Exception e) {
        try {
            sendMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        } catch (TelegramApiException ex) {
            ex.printStackTrace();
        }
        e.printStackTrace();
    }
}