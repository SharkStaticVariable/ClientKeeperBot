package io.project.clientkeeperbot.service;

import io.project.clientkeeperbot.entity.*;
import io.project.clientkeeperbot.repository.AdminResponseRepository;
import io.project.clientkeeperbot.repository.RequetRepository;
import io.project.clientkeeperbot.service.report.ChartReportService;
import io.project.clientkeeperbot.service.report.WordReportService;
import io.project.clientkeeperbot.state.BotState;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeParseException;
import java.util.*;

@Service
@RequiredArgsConstructor
public class AdminService {

    private final RequetRepository requestRepository;
    private final BotStateContextService botStateContextService;
    private final AdminResponseRepository adminResponseRepository;
    @Autowired
    private RequestStateCacheService requestStateCacheService;
    private final WordReportService wordReportService;
    private final ChartReportService chartReportService;
    private final Map<Long, LocalDate> tempFromDateMap = new HashMap<>();
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    public void handleAdminCallback(Long chatId, String callbackData, TelegramBot telegramBot) throws TelegramApiException {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"
        if (callbackData.startsWith("more_")) {
            // –ü—Ä–∏–º–µ—Ä: more_NEW_1
            String[] parts = callbackData.split("_");
            if (parts.length == 3) {
                String statusStr = parts[1];
                int page = Integer.parseInt(parts[2]);

                try {
                    RequestStatus status = RequestStatus.valueOf(statusStr);
                    showRequests(chatId, page, status, telegramBot);
                } catch (IllegalArgumentException e) {
                    sendTextMessage(chatId, "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.", telegramBot);
                }
            } else {
                sendTextMessage(chatId, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.", telegramBot);
            }
            return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å switch
        }

        if (callbackData.startsWith("reply_request_")) {
            Long requestId = Long.parseLong(callbackData.replace("reply_request_", ""));
            sendAcceptRejectOptions(chatId, requestId, telegramBot);
        }

        if (callbackData.startsWith("accept_request_")) {
            Long requestId = Long.parseLong(callbackData.replace("accept_request_", ""));
            showCommentChoice(chatId, requestId, "ACCEPT", telegramBot);
            return;
        }

        if (callbackData.startsWith("reject_request_")) {
            Long requestId = Long.parseLong(callbackData.replace("reject_request_", ""));
            showCommentChoice(chatId, requestId, "REJECT", telegramBot);
            return;
        }

        if (callbackData.startsWith("comment_yes_")) {
            String[] parts = callbackData.split("_");
            String status = parts[2]; // ACCEPT –∏–ª–∏ REJECT
            Long requestId = Long.parseLong(parts[3]);
            if (status.equals("ACCEPT")) {
                botStateContextService.setBotState(chatId, BotState.AWAITING_COMMENT);
                saveRequestIdForState(chatId, requestId);
                requestStateCacheService.saveModerationStatus(chatId, RequestStatus.ACCEPTED);
                sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ #" + requestId + ":", telegramBot);
            } else if (status.equals("REJECT")) {
                botStateContextService.setBotState(chatId, BotState.AWAITING_COMMENT);
                saveRequestIdForState(chatId, requestId);
                requestStateCacheService.saveModerationStatus(chatId, RequestStatus.REJECTED);
                sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #" + requestId + ":", telegramBot);
            }
            return;
        }
        if (callbackData.startsWith("comment_no_")) {
            String[] parts = callbackData.split("_");
            String status = parts[2];
            Long requestId = Long.parseLong(parts[3]);
            RequestStatus finalStatus = status.equals("ACCEPT") ? RequestStatus.ACCEPTED : RequestStatus.REJECTED;
            completeModeration(chatId, requestId, finalStatus, "", telegramBot);
            return;
        }

        BotStateContext context = botStateContextService.getBotStateContext(chatId);
        if (context != null && context.getCurrentState() == BotState.CHART_PERIOD_SELECTION) {
            if (callbackData.equals("chart_7")) {
                generateChartForPeriod(chatId, LocalDate.now().minusDays(6), LocalDate.now(), telegramBot);
            } else if (callbackData.equals("chart_30")) {
                generateChartForPeriod(chatId, LocalDate.now().minusDays(29), LocalDate.now(), telegramBot);
            } else if (callbackData.equals("chart_custom")) {
                botStateContextService.setBotState(chatId, BotState.CHART_CUSTOM_DATE_FROM);
                sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD):", telegramBot);
            }
        }
        switch (callbackData) {
            case "moderation":
                sendTextMessage(chatId, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∑–∞—è–≤–æ–∫.", telegramBot);
                showModerationOptions(chatId, telegramBot);
                break;
            case "moderation_new":
                showRequests(chatId, 0, RequestStatus.NEW, telegramBot);
                break;
            case "moderation_changed":
                showRequests(chatId, 0, RequestStatus.CHANGED, telegramBot);
                break;
            case "addfaq":
                sendTextMessage(chatId, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ FAQ.", telegramBot);
                break;
            case "report":
                showReportOptions(chatId, telegramBot);
                break;

            case "report_chart":
                botStateContextService.setBotState(chatId, BotState.CHART_PERIOD_SELECTION);
                sendChartPeriodOptions(chatId, telegramBot);
                break;

            case "report_2":
                botStateContextService.setBotState(chatId, BotState.CHART_PERIOD_SELECTION);
                sendAdminActivityPeriodOptions(chatId, telegramBot);
                break;

            case "chart_admin_7":
                generateAdminActivityChartForPeriod(chatId, LocalDate.now().minusDays(6), LocalDate.now(), telegramBot);
                break;
            case "chart_admin_30":
                generateAdminActivityChartForPeriod(chatId, LocalDate.now().minusDays(29), LocalDate.now(), telegramBot);
                break;
            case "chart_admin_custom":
                // –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
                botStateContextService.setBotState(chatId, BotState.CHART_CUSTOM_DATE_FROM_ADMIN);
                sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD):", telegramBot);
                break;
            case "system":
                showSystemOptions(chatId, telegramBot);
                break;
            case "back_to_admin_panel":
                showAdminPanel(chatId, telegramBot);
                break;
            case "addadmin":
                sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ Telegram ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n–ü—Ä–∏–º–µ—Ä: addadmin:123456789", telegramBot);
                break;
            case "removeadmin":
                sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ Telegram ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n–ü—Ä–∏–º–µ—Ä: removeadmin:123456789", telegramBot);
                break;
        }
    }
    public void handleAdminText(Long chatId, String messageText, TelegramBot telegramBot) {
        BotStateContext context = botStateContextService.getBotStateContext(chatId);

        if (messageText.equals("üìã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")) {
            try {
                showAdminPanel(chatId, telegramBot);
            } catch (TelegramApiException e) {
                e.printStackTrace(); // –ò–ª–∏ –ª–æ–≥–≥–∏—Ä—É–π —á–µ—Ä–µ–∑ –ª–æ–≥–≥–µ—Ä
            }
            return;
        }
        if (context != null && context.getCurrentState() == BotState.CHART_CUSTOM_DATE_FROM) {
            try {
                LocalDate from = LocalDate.parse(messageText.trim());
                tempFromDateMap.put(chatId, from);
                botStateContextService.setBotState(chatId, BotState.CHART_CUSTOM_DATE_TO);
                sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD):", telegramBot);
            } catch (DateTimeParseException e) {
                sendTextMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: YYYY-MM-DD", telegramBot);
            }
            return;
        }
        if (context != null && context.getCurrentState() == BotState.CHART_CUSTOM_DATE_FROM_ADMIN) {
            try {
                LocalDate from = LocalDate.parse(messageText.trim());
                tempFromDateMap.put(chatId, from);
                botStateContextService.setBotState(chatId, BotState.CHART_CUSTOM_DATE_TO_ADMIN);
                sendTextMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD):", telegramBot);
            } catch (DateTimeParseException e) {
                sendTextMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: YYYY-MM-DD", telegramBot);
            }
            return;
        }
        if (context != null && context.getCurrentState() == BotState.ENTER_CHART_PERIOD) {
            try {
                String[] parts = messageText.split("\\s+");
                LocalDate from = LocalDate.parse(parts[0]);
                LocalDate to = LocalDate.parse(parts[1]);

                generateChartForPeriod(chatId, from, to, telegramBot);
                botStateContextService.setBotState(chatId, BotState.DEFAULT);
            } catch (Exception e) {
                sendTextMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ –≤–∏–¥–µ `yyyy-MM-dd yyyy-MM-dd`", telegramBot);
            }
        }

        if (context != null && context.getCurrentState() == BotState.ENTER_CHART_PERIOD_ADMIN) {
            try {
                String[] parts = messageText.split("\\s+");
                LocalDate from = LocalDate.parse(parts[0]);
                LocalDate to = LocalDate.parse(parts[1]);

                generateAdminActivityChartForPeriod(chatId, from, to, telegramBot);
                botStateContextService.setBotState(chatId, BotState.DEFAULT);
            } catch (Exception e) {
                sendTextMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ –≤–∏–¥–µ `yyyy-MM-dd yyyy-MM-dd`", telegramBot);
            }
        }

        if (context != null && context.getCurrentState() == BotState.CHART_CUSTOM_DATE_TO) {
            try {
                LocalDate to = LocalDate.parse(messageText.trim());
                LocalDate from = tempFromDateMap.get(chatId);
                generateChartForPeriod(chatId, from, to, telegramBot);
                tempFromDateMap.remove(chatId);
            } catch (DateTimeParseException e) {
                sendTextMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: YYYY-MM-DD", telegramBot);
            }
            return;
        }

        if (context != null && context.getCurrentState() == BotState.CHART_CUSTOM_DATE_TO_ADMIN) {
            try {
                LocalDate to = LocalDate.parse(messageText.trim());
                LocalDate from = tempFromDateMap.get(chatId);
                generateAdminActivityChartForPeriod(chatId, from, to, telegramBot);
                tempFromDateMap.remove(chatId);
            } catch (DateTimeParseException e) {
                sendTextMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: YYYY-MM-DD", telegramBot);
            }
            return;
        }
        if (messageText.equals("/report_chart")) {
            botStateContextService.setBotState(chatId, BotState.CHART_PERIOD_SELECTION);
            InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder()
                    .keyboardRow(List.of(
                            InlineKeyboardButton.builder().text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π").callbackData("chart_7").build(),
                            InlineKeyboardButton.builder().text("–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü").callbackData("chart_30").build()
                    ))
                    .keyboardRow(List.of(
                            InlineKeyboardButton.builder().text("–£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é").callbackData("chart_custom").build()
                    ))
                    .build();
            try {
                telegramBot.execute(SendMessage.builder()
                        .chatId(chatId.toString())
                        .text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:")
                        .replyMarkup(markup)
                        .build());
            } catch (TelegramApiException e) {
                e.printStackTrace(); // –∏–ª–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ª–æ–≥–≥–µ—Ä
            }

        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ
        if (context != null && context.getCurrentState() == BotState.AWAITING_COMMENT) {
            Long requestId = requestStateCacheService.getRequestId(chatId);
            RequestStatus requestStatus = requestStateCacheService.getModerationStatus(chatId);
            if (requestId != null && requestStatus != null) {
                try {
                    completeModeration(chatId, requestId, requestStatus, messageText, telegramBot);
                    sendTextMessage(chatId, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –∑–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", telegramBot);
                } catch (TelegramApiException e) {
                        sendTextMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.", telegramBot);
                    }
            } else {
                    sendTextMessage(chatId, "–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", telegramBot);
                }

            botStateContextService.setBotState(chatId, BotState.DEFAULT);
            requestStateCacheService.clearRequestId(chatId);
            requestStateCacheService.clearModerationStatus(chatId);
        }
    }
    private void showReportOptions(Long chatId, TelegramBot bot) {
        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder()
                .keyboardRow(List.of(
                        InlineKeyboardButton.builder().text("üìà –ì—Ä–∞—Ñ–∏–∫ –∑–∞—è–≤–æ–∫").callbackData("report_chart").build()
                ))
                .keyboardRow(List.of(
                        InlineKeyboardButton.builder().text("üìÑ –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤").callbackData("report_2").build(),
                        InlineKeyboardButton.builder().text("üìÑ –û—Ç—á—ë—Ç 3").callbackData("report_3").build()
                ))
                .keyboardRow(List.of(
                        InlineKeyboardButton.builder().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥").callbackData("back_to_admin_panel").build()
                ))
                .build();

        sendTextMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", bot, markup);
    }

    private void sendAdminActivityPeriodOptions(Long chatId, TelegramBot bot) {
        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder()
                .keyboardRow(List.of(
                        InlineKeyboardButton.builder().text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π").callbackData("chart_admin_7").build(),
                        InlineKeyboardButton.builder().text("–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü").callbackData("chart_admin_30").build()
                ))
                .keyboardRow(List.of(
                        InlineKeyboardButton.builder().text("–£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é").callbackData("chart_admin_custom").build()
                ))
                .keyboardRow(List.of(
                        InlineKeyboardButton.builder().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥").callbackData("report").build()
                ))
                .build();

        sendTextMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:", bot, markup);
    }
    private void generateAdminActivityChartForPeriod(Long chatId, LocalDate from, LocalDate to, TelegramBot bot) {
        try {
            RequestCountChart chart = chartReportService.generateAndSaveChartAdmin(from, to, chatId); // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            File file = new File(chart.getFilePath());

            bot.execute(SendDocument.builder()
                    .chatId(chatId.toString())
                    .document(new InputFile(file))
                    .caption("–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å " + from + " –ø–æ " + to)
                    .build());

            botStateContextService.setBotState(chatId, BotState.DEFAULT);
        } catch (Exception e) {
            sendTextMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: " + e.getMessage(), bot);
        }
    }


    private void generateChartForPeriod(Long chatId, LocalDate from, LocalDate to, TelegramBot bot) {
        try {
            RequestCountChart chart = chartReportService.generateAndSaveChart(from, to, chatId);
            File file = new File(chart.getFilePath());

            bot.execute(SendDocument.builder()
                    .chatId(chatId.toString())
                    .document(new InputFile(file))
                    .caption("–ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–æ–∫ —Å " + from + " –ø–æ " + to)
                    .build());

            botStateContextService.setBotState(chatId, BotState.DEFAULT);
        } catch (Exception e) {
            sendTextMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: " + e.getMessage(), bot);
        }
    }

    private void sendChartPeriodOptions(Long chatId, TelegramBot bot) {
        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder()
                .keyboardRow(List.of(
                        InlineKeyboardButton.builder().text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π").callbackData("chart_7").build(),
                        InlineKeyboardButton.builder().text("–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü").callbackData("chart_30").build()
                ))
                .keyboardRow(List.of(
                        InlineKeyboardButton.builder().text("–£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é").callbackData("chart_custom").build()
                ))
                .keyboardRow(List.of(
                        InlineKeyboardButton.builder().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥").callbackData("report").build()
                ))
                .build();

        sendTextMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:", bot, markup);
    }

    private void saveRequestIdForState(Long chatId, Long requestId) {
        requestStateCacheService.saveRequestId(chatId, requestId);
    }

    public void completeModeration(Long chatId, Long requestId, RequestStatus status, String comment, TelegramBot telegramBot) throws TelegramApiException {
    Optional<Request> optionalRequest = requestRepository.findById(requestId);
    if (optionalRequest.isEmpty()) {
        sendTextMessage(chatId, "–ó–∞—è–≤–∫–∞ —Å ID " + requestId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", telegramBot);
        return;
    }

    Request request = optionalRequest.get();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    request.setStatus(status);
    requestRepository.save(request);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    AdminResponse response = new AdminResponse();
    response.setRequest(request);
    response.setAdminId(chatId);
    response.setResponseText(comment);
    response.setResponseDate(LocalDateTime.now());
    response.setStatus(status);
    adminResponseRepository.save(response);


        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Word-–æ—Ç—á–µ—Ç–∞
        try {
            WordReport report = wordReportService.generateAndSaveReport(request, response, chatId);
            File file = new File(report.getFilePath());

            if (file.exists()) {
                SendDocument sendDoc = new SendDocument();
                sendDoc.setChatId(chatId);
                sendDoc.setDocument(new InputFile(file));
                telegramBot.execute(sendDoc);
            } else {
                sendTextMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.", telegramBot);
            }
        } catch (Exception e) {
            sendTextMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Word-–æ—Ç—á–µ—Ç–∞: " + e.getMessage(), telegramBot);
            e.printStackTrace();
        }
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Long clientId = request.getClientId();
    String statusEmoji = status == RequestStatus.ACCEPTED ? "‚úÖ" : "‚ùå";

    StringBuilder userMessage = new StringBuilder();
    userMessage.append(statusEmoji)
            .append(" –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ").append(requestId)
            .append(" –±—ã–ª–∞ ").append(status == RequestStatus.ACCEPTED ? "–ø—Ä–∏–Ω—è—Ç–∞." : "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.");

    if (comment != null && !comment.isBlank()) {
        userMessage.append("\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n").append(comment);
    }

    telegramBot.execute(SendMessage.builder()
            .chatId(clientId.toString())
            .text(userMessage.toString())
            .build());

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    sendTextMessage(chatId, "–ó–∞—è–≤–∫–∞ #" + requestId + " —É—Å–ø–µ—à–Ω–æ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.", telegramBot);
}

    private void showCommentChoice(Long chatId, Long requestId, String status, TelegramBot telegramBot) throws TelegramApiException {
        InlineKeyboardButton yes = new InlineKeyboardButton("üí¨ –î–∞");
        yes.setCallbackData("comment_yes_" + status + "_" + requestId);

        InlineKeyboardButton no = new InlineKeyboardButton("‚õî –ù–µ—Ç");
        no.setCallbackData("comment_no_" + status + "_" + requestId);

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(List.of(List.of(yes, no)));

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–≤–µ—Ç—É?");
        message.setReplyMarkup(markup);

        telegramBot.execute(message);
    }

    public void sendAcceptRejectOptions(Long chatId, Long requestId, TelegramBot bot) throws TelegramApiException {
        SendMessage msg = new SendMessage();
        msg.setChatId(chatId.toString());
        msg.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ #" + requestId);

        InlineKeyboardButton accept = new InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å");
        accept.setCallbackData("accept_request_" + requestId);

        InlineKeyboardButton reject = new InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å");
        reject.setCallbackData("reject_request_" + requestId);

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(List.of(List.of(accept, reject)));

        msg.setReplyMarkup(markup);
        bot.execute(msg);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    public void showAdminPanel(Long chatId, TelegramBot telegramBot) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        InlineKeyboardButton moderationButton = new InlineKeyboardButton();
        moderationButton.setText("–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫");
        moderationButton.setCallbackData("moderation");

        InlineKeyboardButton faqButton = new InlineKeyboardButton();
        faqButton.setText("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ FAQ");
        faqButton.setCallbackData("addfaq");

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(moderationButton);
        row1.add(faqButton);

        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
        InlineKeyboardButton reportButton = new InlineKeyboardButton();
        reportButton.setText("–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å");
        reportButton.setCallbackData("report");

        InlineKeyboardButton systemButton = new InlineKeyboardButton();
        systemButton.setText("–°–∏—Å—Ç–µ–º–∞");
        systemButton.setCallbackData("system");

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(reportButton);
        row2.add(systemButton);

        keyboard.add(row1);
        keyboard.add(row2);
        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);

        telegramBot.execute(message);
    }

    public void showModerationOptions(Long chatId, TelegramBot telegramBot) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–æ–∫:");

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton newRequests = new InlineKeyboardButton();
        newRequests.setText("üì• –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏");
        newRequests.setCallbackData("moderation_new");

        InlineKeyboardButton changedRequests = new InlineKeyboardButton();
        changedRequests.setText("üìù –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏");
        changedRequests.setCallbackData("moderation_changed");

        rows.add(List.of(newRequests));
        rows.add(List.of(changedRequests));
        markup.setKeyboard(rows);

        message.setReplyMarkup(markup);
        telegramBot.execute(message);
    }

    public void showRequests(Long chatId, int page, RequestStatus status, TelegramBot bot) throws TelegramApiException {
        int pageSize = 5;
        List<Request> requests = requestRepository.findByStatus(status, PageRequest.of(page, pageSize)).getContent();

        if (requests.isEmpty()) {
            sendTextMessage(chatId, "–ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å —ç—Ç–∏–º —Å—Ç–∞—Ç—É—Å–æ–º.", bot);
            return;
        }

        for (Request req : requests) {
            String messageText = String.format(
                    "üÜî ‚Ññ%d\n" +
                            "üìå –¢–∏–ø: %s\n" +
                            "üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s\n" +
                            "üìÖ –°—Ä–æ–∫–∏: %s\n" +
                            "üí∞ –ë—é–¥–∂–µ—Ç: %s\n" +
                            "üì± –ö–æ–Ω—Ç–∞–∫—Ç: %s\n" +
                            "üìä –°—Ç–∞—Ç—É—Å: %s",
                    req.getId(),
                    req.getType(),
                    req.getDescription(),
                    req.getDeadline(),
                    req.getBudget(),
                    req.getContact(),
                    req.getStatus().getDisplayName()
            );

            SendMessage msg = new SendMessage();
            msg.setChatId(chatId.toString());
            msg.setText(messageText);

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            InlineKeyboardButton replyButton = new InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å");
            replyButton.setCallbackData("reply_request_" + req.getId());

            markup.setKeyboard(List.of(List.of(replyButton)));
            msg.setReplyMarkup(markup);

            bot.execute(msg);
        }

        // –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"
        SendMessage more = new SendMessage();
        more.setChatId(chatId.toString());
        more.setText("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?");

        InlineKeyboardButton moreBtn = new InlineKeyboardButton("‚û°Ô∏è –ï—â—ë");
        moreBtn.setCallbackData("more_" + status.name() + "_" + (page + 1));
        InlineKeyboardMarkup moreMarkup = new InlineKeyboardMarkup();
        moreMarkup.setKeyboard(List.of(List.of(moreBtn)));

        more.setReplyMarkup(moreMarkup);
        bot.execute(more);
    }

    public void sendReplyKeyboardWithMenuButtonAdmin(Long chatId, TelegramBot telegramBot) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"); // –û—Ç–ø—Ä–∞–≤–∏—Ç –ø—Ä–æ–±–µ–ª ‚Äî Telegram –ø—Ä–∏–º–µ—Ç

        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add(new KeyboardButton("üìã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"));
        keyboard.add(row);

        markup.setKeyboard(keyboard);
        markup.setResizeKeyboard(true);

        markup.setOneTimeKeyboard(false); // —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –∏—Å—á–µ–∑–∞–ª–∞

        message.setReplyMarkup(markup);

        telegramBot.execute(message);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    public void sendTextMessage(Long chatId, String text, TelegramBot telegramBot) {
        try {
            telegramBot.execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(text)
                    .build());
        } catch (TelegramApiException e) {
            e.printStackTrace(); // –∏–ª–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞—Ç—å
        }
    }

    private void sendTextMessage(Long chatId, String text, TelegramBot bot, InlineKeyboardMarkup markup) {
        try {
            bot.execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(text)
                    .replyMarkup(markup)
                    .build());
        } catch (TelegramApiException e) {
            e.printStackTrace(); // –ª–æ–≥–≥–∏—Ä—É–π, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
        }
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    public void showSystemOptions(Long chatId, TelegramBot telegramBot) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–°–∏—Å—Ç–µ–º–∞: –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        InlineKeyboardButton addAdminButton = new InlineKeyboardButton();
        addAdminButton.setText("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        addAdminButton.setCallbackData("addadmin");

        InlineKeyboardButton removeAdminButton = new InlineKeyboardButton();
        removeAdminButton.setText("–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        removeAdminButton.setCallbackData("removeadmin");

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(addAdminButton);
        row1.add(removeAdminButton);

        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
        backButton.setCallbackData("back_to_admin_panel");

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(backButton);

        keyboard.add(row1);
        keyboard.add(row2);
        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);
        telegramBot.execute(message);
    }
}